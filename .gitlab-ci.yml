# Pipeline is supposed to only run on project-specific runners using a shell
# executor and actively running docker. This is a requirement for R CMD check
# and tests as they require docker to be running.
default:
  tags:
    - docker
    - shell
    - specific

stages:
  - build
  - test
  - deploy

variables:
  R_LIBS_USER: "$CI_PROJECT_DIR/ci/lib"
  CHECK_DIR: "$CI_PROJECT_DIR/ci/logs"

before_script:
  - docker info
  - Get-WmiObject -Class Win32_ComputerSystem

building:
  stage: build
  script:
    - mkdir -p $R_LIBS_USER
    - cmd.exe /C R -e "install.packages('devtools', destdir = Sys.getenv('R_LIBS_USER'), dependencies = TRUE)"
    - cmd.exe /C R -e "remotes::install_deps(dependencies = TRUE, lib = Sys.getenv('R_LIBS_USER'))"
    - cmd.exe /C R -e "devtools::check(vignettes = FALSE, check_dir = Sys.getenv('CHECK_DIR'), args = '--no-tests')"
  cache:
    paths:
      - $R_LIBS_USER

testing:
    stage: test
    allow_failure: true
    when: on_success
    only:
        - master
    script:
        - cmd.exe /C "R -e install.packages('DT')"
        - cmd.exe /C "R -e covr::gitlab(quiet = FALSE)"
    artifacts:
        paths:
            - public

# To produce a code coverage report as a GitLab page see
# https://about.gitlab.com/2016/11/03/publish-code-coverage-report-with-gitlab-pages/

pages:
    stage: deploy
    dependencies:
        - testing
    script:
        - ls
    artifacts:
        paths:
            - public
        expire_in: 30 days
    only:
        - master
