# Pipeline is supposed to only run on project-specific runners using a shell
# executor and actively running docker. This is a requirement for R CMD check
# and tests as they require docker to be running successfully.
default:
  tags:
    - docker
    - shell
    - specific

stages:
  - build
  - test
  - deploy

variables:
  R_LIBS_USER:
    value: "$CI_PROJECT_DIR/ci/lib"
    description: "Temporary R package library."
  CHECK_DIR:
    value: "$CI_PROJECT_DIR/ci/logs"
    description: "Temporary logs directory for R CMD check."
  GITLAB_CI:
    value: "TRUE"
    description: Specifies that commands are run on GitLab CI.

before_script:
  - docker info
  - docker system info

building:win:
  stage: build
  script:
    - mkdir -p $R_LIBS_USER -Force
    - cmd.exe /C R -e "install.packages('devtools', lib = Sys.getenv('R_LIBS_USER'), repos = 'https://cran.rstudio.com/', dependencies = TRUE)"
    - cmd.exe /C R -e "remotes::install_deps(dependencies = TRUE, lib = Sys.getenv('R_LIBS_USER'), repos = 'https://cran.rstudio.com/')"
    - cmd.exe /C R -e "devtools::check(vignettes = FALSE, check_dir = Sys.getenv('CHECK_DIR'), args = '--no-tests')"
  cache:
    key: win-lib-cache-$CI_COMMIT_TAG
    paths:
      - $R_LIBS_USER

#building:linux:
#  stage: build
#  rules:
#    - if: '$CI_RUNNER_DESCRIPTION == "orsr-linux-runner"'
#  script:
#    - mkdir -p $R_LIBS_USER
#    - R -e "install.packages('devtools', lib = Sys.getenv('R_LIBS_USER'), repos = 'https://cran.rstudio.com/', dependencies = TRUE)"
#    - R -e "remotes::install_deps(dependencies = TRUE, lib = Sys.getenv('R_LIBS_USER'), repos = 'https://cran.rstudio.com/')"
#    - R -e "devtools::check(vignettes = FALSE, check_dir = Sys.getenv('CHECK_DIR'), args = '--no-tests')"
#  cache:
#    paths:
#      - $R_LIBS_USER

testing:win:
  stage: test
  dependencies:
    - building:win
  rules:
    - if: '$CI_RUNNER_DESCRIPTION == "orsr-win-runner"'
      when: on_success
      allow_failure: true
    - if: '$CI_COMMIT_REF_NAME == "master"'
  script:
    - cmd.exe /C R -e "print(paste(getwd(), Sys.getenv('R_LIBS_USER')))"
    - cmd.exe /C R -e "install.packages('DT', lib = Sys.getenv('R_LIBS_USER'), repos = 'https://cran.rstudio.org')"
    - cmd.exe /C R -e "covr::gitlab(quiet = FALSE)"
  cache:
    key: win-lib-cache-$CI_COMMIT_TAG
    paths:
      - $R_LIBS_USER
  artifacts:
    paths:
      - public
    when: on_success

#testing:linux:
#  stage: test
#  rules:
#    - if: '$CI_RUNNER_DESCRIPTION == "orsr-linux-runner"'
#      when: on_success
#      allow_failure: true
#    - if: '$CI_COMMIT_REF_NAME == "master"'
#  script:
#    - R -e "install.packages('DT', lib = Sys.getenv('R_LIBS_USER'), repos = 'https://cran.rstudio.org')"
#    - R -e "covr::gitlab(quiet = FALSE)"
#  artifacts:
#    paths:
#      - public
#    when: on_success

# To produce a code coverage report as a GitLab page see
# https://about.gitlab.com/2016/11/03/publish-code-coverage-report-with-gitlab-pages/

pages:win:
  stage: deploy
  allow_failure: true
  dependencies:
    - testing:win
  script:
    - ls
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master

#pages:linux:
#  stage: deploy
#  allow_failure: true
#  dependencies:
#    - testing:linux
#  script:
#    - ls
#  artifacts:
#    paths:
#      - public
#    expire_in: 30 days
#  only:
#    - master
