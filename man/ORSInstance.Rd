% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/init.R
\name{ORSInstance}
\alias{ORSInstance}
\title{OpenRouteService backend control panel}
\description{
R6 class that acts as a setup wizard and control panel for the OpenRouteService backend service.
The class facilitates the setup of the Docker container and allows making changes to the setup from within R.
}
\details{
The purpose of this class is to facilitate the OpenRouteService installation process.
Alternatively, you can follow the official instructions from the \link{https://giscience.github.io/openrouteservice/installation/Advanced-Docker-Setup.html}{OpenRouteService documentation}.
The developer team recently extended the installation guide considerably.

The class has four sub classes. \code{\link{ORSExtract}} manages the OpenRouteService extract and is able to
download \code{.pbf} files from different sources using the \code{osmextract} package. \code{\link{ORSConfig}} controls
the configuration file (\code{ors-config.json}) which is also used to set active profiles.
\code{\link{ORSSetupSettings}} can be used to make changes to the Docker setup, e.g. to allocate RAM, assign
extracts or change the local server access. \code{\link{ORSDockerInterface}} provides a basic interface to Docker
commands and can be used to check the status of the image, container and service. \code{\link{ORSSetupSettings}}
should be initialized last as the Docker setup needs information on the extract and the number of
profiles to assign the extract and estimate the required RAM to be allocated.

If the setup keeps failing due to whatever reason, try resetting the docker path of the main directory
(as specified in \verb{$dir}), or just delete the directory and download it again to be safe.

If the setup fails due to an OutOfMemoryError, first check if you allocated enough memory. If it keeps
failing, clear the available memory or restart the system. OpenRouteService recommends allocating a
little more than twice the extract size. Make sure not to allocate more than your available memory.
If you allocate more than 80\% of your free working memory, the function will stop. For details refer
to the \href{https://giscience.github.io/openrouteservice/installation/System-Requirements.html}{system requirements of OpenRouteService}
}
\seealso{
\code{\link{ORSExtract}}, \code{\link{ORSConfig}}, \code{\link{ORSDockerInterface}}, \code{\link{ORSSSetupSettings}}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{dir}}{ORS directory, either passed as a parameter or automatically set after
calling \verb{$clone_ors_repo}}

\item{\code{extract}}{\code{ORSExtract} environment. See \code{\link{ORSExtract}}.}

\item{\code{config}}{\code{ORSConfig} environment. See \code{\link{ORSConfig}}.}

\item{\code{docker}}{\code{ORSDockerInterface} environment. See \code{\link{ORSDockerInterface}}.}

\item{\code{setup_settings}}{\code{ORSSetupSettings} environment. See \code{\link{ORSSetupSettings}}.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ORSInstance$new()}}
\item \href{#method-finalize}{\code{ORSInstance$finalize()}}
\item \href{#method-get_config}{\code{ORSInstance$get_config()}}
\item \href{#method-init_docker}{\code{ORSInstance$init_docker()}}
\item \href{#method-get_setup_settings}{\code{ORSInstance$get_setup_settings()}}
\item \href{#method-set_ors_wd}{\code{ORSInstance$set_ors_wd()}}
\item \href{#method-init_setup}{\code{ORSInstance$init_setup()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize \code{\link{ORSInstance}} as well as \code{\link{ORSExtract}} and \code{\link{ORSConfig}} and
\code{\link{ORSDockerInterface}}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSInstance$new(dir = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dir}}{Custom ORS directory. If not specified, the directory will be downloaded
from the \link{official GitHub repository}: https://github.com/GIScience/openrouteservice.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-finalize"></a>}}
\if{latex}{\out{\hypertarget{method-finalize}{}}}
\subsection{Method \code{finalize()}}{
If necessary, stops the current ORS container when the class instance is removed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSInstance$finalize()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_config"></a>}}
\if{latex}{\out{\hypertarget{method-get_config}{}}}
\subsection{Method \code{get_config()}}{
Initializes \code{\link{ORSConfig}} as an environment field. Call this if the config path changes
(e.g. after the initial ORS setup).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSInstance$get_config()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-init_docker"></a>}}
\if{latex}{\out{\hypertarget{method-init_docker}{}}}
\subsection{Method \code{init_docker()}}{
Initializes \code{\link{ORSDockerInterface}} as an environment field. This method starts docker
and delivers and interface to interact with docker.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSInstance$init_docker()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_setup_settings"></a>}}
\if{latex}{\out{\hypertarget{method-get_setup_settings}{}}}
\subsection{Method \code{get_setup_settings()}}{
Initializes \code{\link{ORSSetupSettings}} as an environment field and prepares the necessary
changes to the \code{Dockerfile} and \code{docker-compose.yml}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSInstance$get_setup_settings(init_memory = NULL, max_memory = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{init_memory}}{Initial memory to be allocated to the docker container.}

\item{\code{max_memory}}{Maximum memory to be allocated to the docker container. The
container will start with the initial memory and increases the memory usage up to
the maximum memory if necessary.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_ors_wd"></a>}}
\if{latex}{\out{\hypertarget{method-set_ors_wd}{}}}
\subsection{Method \code{set_ors_wd()}}{
Tries to find the ORS directory and set it as the current working directory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSInstance$set_ors_wd(dir = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dir}}{Custom ORS directory. If not specified, the method will look inside the
default path and expects the default directory naming.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-init_setup"></a>}}
\if{latex}{\out{\hypertarget{method-init_setup}{}}}
\subsection{Method \code{init_setup()}}{
Changes the necessary settings and configurations for the first startup, builds the
image and starts the container. This function should only be used when starting the service for
the first time. Changes after that should preferably be made manually.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSInstance$init_setup(wait = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{wait}}{Logical. If \code{TRUE}, the function will not stop running after the container is being
started and will give out a notification as soon as the service is ready. If \code{FALSE}, the function
will start the container and then stop. To check the server status, you can then call \verb{$server_ready}
from the class \code{\link{ORSDockerInterface}}.}
}
\if{html}{\out{</div>}}
}
}
}
