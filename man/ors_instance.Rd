% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ORSInstance2.R
\name{ors_instance}
\alias{ors_instance}
\title{OpenRouteService instance}
\usage{
ors_instance(
  instance = NULL,
  dir = "~",
  version = "master",
  overwrite = FALSE,
  auto_deletion = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{instance}{Object of class \code{ors_constructor} or \code{NULL}. If
\code{NULL}, creates a new instance from a given directory. Otherwise, the
existing instance object is validated and updated. This is especially useful
if files were manually changed (e.g., through the use of
\code{\link[ORSRouting]{edit_config}}) or if the respective Docker container
was manually built or taken down.}

\item{dir}{Custom OpenRouteService directory. If not specified, the directory
will be downloaded to the system's home directory. If a directory called
\code{"openrouteservice-{version}"} is present, the download will be skipped.}

\item{version}{The OpenRouteService version to use. Can either be a version
number (e.g. 6.7.0) or \code{"master"}.}

\item{overwrite}{Whether to overwrite the current OpenRouteService directory
if it exists.}

\item{auto_deletion}{By default, OpenRouteService prevents all profiles from
being built on first setup. If \code{FALSE}, disables this behavior. Otherwise,
all profiles other than car have to be enabled after the first setup.
Defaults to \code{TRUE}, because the OpenRouteService team recommends
building graphs for only the car profile in the initial setup.}

\item{verbose}{If \code{TRUE}, prints informative messages.}
}
\value{
Nested list of class \code{ors_constructor}. The object auto-prints
additional attributes, that describe the setup state:
\describe{
\item{active}{Whether an ORS instance is currently used inside the package
environment.}
\item{alive}{Whether an ORS object refers to an existing instance or if the
instance was removed using \code{\link[ORSROuting]{ors_remove}}.}
\item{built}{Whether an initial setup of an ORS instance was done.}
}
}
\description{
Creates an OpenRouteService constructor object. A constructor
can be used to configure the OpenRouteService instance and start the
application. To do this, the constructor object can be modified and
complemented using the following functions:

\itemize{
\item Mount an extract with \code{\link[ORSRouting]{ors_extract}}
\item Change the ORS configuration with \code{\link[ORSRouting]{ors_config}}
\item Change container settings with \code{\link[ORSRouting]{ors_settings}}
\item Build and start a container with \code{\link[ORSRouting]{ors_up}}
\item Take a container down with \code{\link[ORSRouting]{ors_down}}
\item Start an existing container with \code{\link[ORSRouting]{ors_start}}
\item Stop a running container with \code{\link[ORSRouting]{ors_stop}}
\item Remove OpenRouteService with \code{\link[ORSRouting]{ors_remove}}
}
}
\examples{
\dontrun{
dir <- dir.create("~/test_ors")

# Download and furnish an ORS instance
ors <- ors_instance(dir = dir, version = 6.7.0, auto_deletion = FALSE)
ors

# Update an ORS instance
ors <- ors_instance(ors)
}

}
\seealso{
Other ORS setup functions: 
\code{\link{ors_change}()},
\code{\link{ors_config}()},
\code{\link{ors_down}()},
\code{\link{ors_extract}()},
\code{\link{ors_remove}()},
\code{\link{ors_settings}()},
\code{\link{ors_start}()},
\code{\link{ors_stop}()},
\code{\link{ors_up}()}
}
\concept{ORS setup functions}
