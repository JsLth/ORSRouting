% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/route-inspection.R
\name{ors_inspect}
\alias{ors_inspect}
\alias{ors_summary}
\title{Route inspection}
\usage{
ors_inspect(
  source,
  destination,
  profile = get_profiles(),
  attributes = list(),
  elevation = TRUE,
  extra_info = list(),
  instance = NULL,
  ...,
  elev_as_z = FALSE
)

ors_summary(
  source,
  destination,
  profile = get_profiles(),
  instance = NULL,
  ...
)
}
\arguments{
\item{source}{\code{[sf]}

Source dataset containing a single point geometry that shall be routed from.}

\item{destination}{\code{[sf]}

Destination dataset containing a single point geometry that shall be routed
to.}

\item{profile}{\code{[character]}

Character vector. Means of transport as supported by OpenRouteService. For a
list of active profiles, call \code{\link{get_profiles}}. For details on all
profiles, refer to the
\href{https://giscience.github.io/openrouteservice/documentation/Tag-Filtering.html}{documentation}.}

\item{attributes}{\code{[list]}

List of attributes that summarize route characteristics.
This includes two values: \code{avgspeed} states the average vehicle speed
along the route, \code{detourfactor} indicates how much the route deviates
from a straight line. If \code{TRUE}, both values are included.}

\item{elevation}{\code{[logical]}

If \code{TRUE}, elevation data is included in the output.}

\item{extra_info}{List of keywords that add extra information regarding each
linestring segment of the output. Possible values include:
\itemize{
\item steepness
\item suitability
\item surface
\item waycategory
\item waytype
\item tollways (only for \code{driving-*})
\item traildifficulty
\item osmid (only for \code{wheelchair})
\item roadaccessrestrictions (only for \code{driving-*})
\item countryinfo (only for \code{driving-*})
\item green (only for \code{walking}/\code{hiking})
\item noise (only for \code{walking}/\code{hiking})
}
If \code{TRUE}, all values are included. Refer to the
\href{https://giscience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html}{routing response documentation}
and the \href{https://openrouteservice.org/dev/#/ap-docs/v2/directions/{profile}/post}{API playground}
for more information on extra information.}

\item{instance}{\code{[ors_instance]}

Object of an OpenRouteService instance that should be used for route
computations. It is recommended to use \code{\link{ors_instance}}
to set an instance globally. This argument should only be used if activating
an instance globally is not feasible.}

\item{...}{Additional arguments passed to the ORS API. This includes all
options that modify the routing results. For details on each argument,
refer to the
\href{https://openrouteservice.org/dev/#/api-docs/v2/directions/{profile}/post}{API playground}
and
\href{https://giscience.github.io/openrouteservice/documentation/routing-options/Routing-Options.html}{documentation}
\describe{
\item{\strong{geometry_simplify}}{Logical length-1 vector specifying
whether geometry should be simplified.}
\item{\strong{continue_straight}}{Logical length-1 vector. If \code{FALSE},
avoids u-turns and forces the route to
keep going straight.}
\item{\strong{avoid_borders}}{Length-1 character vector specifying whether
to avoid, all borders, only controlled ones
or none. Only available for \code{driving-*}.}
\item{\strong{avoid_countries}}{Numeric vector listing countries to avoid.
Each country is assigned a numeric value.
Refer to the ORS documentation. Only
available for \code{driving-*}.}
\item{\strong{avoid_features}}{Character vector containing traffic features
to avoid (e.g. highways or tunnels).}
\item{\strong{avoid_polygons}}{\code{sf} or \code{sfc} object describing
areas to avoid.}
\item{\strong{profile_params}}{Nested list containing restrictions and
weightings for \code{driving-hgv},
\code{cycling-*}, \code{walking},
\code{hiking} and \code{wheelchair}.}
\item{\strong{vehicle_type}}{Length-1 character vector specifying the type
of heavy goods vehicle. Needed to set
restrictions for \code{driving-hgv}.}
\item{\strong{preference}}{Length-1 character vector describing the routing
preference. Either "recommended", "fastest" or
"shortest".}
\item{\strong{radiuses}}{Maximum distance (in m) that road segments can be
snapped to. \code{radiuses = -1} represents an
unlimited radius. This option can also be adjusted
in the ORS service configurations.}
\item{\strong{maximum_speed}}{Numeric length-1 vector specifying the
maximum speed.}
}}

\item{elev_as_z}{\code{[logical]}

If \code{TRUE}, elevation data is stored as z-values in the
geometry of the output \code{sf} dataframe. If \code{FALSE}, elevation is
stored as a distinct dataframe column. Ignored if \code{elevation = FALSE}.}
}
\value{
\code{ors_inspect} returns an sf data.frame containing the smallest
possible linestrings for a route along with additional information on each
segment. \code{ors_summary} returns an object of type \code{route_summary}
that contains information on distances, durations, speed, elevation, detour
factors as well as all available extra information for the requested route.
}
\description{
Calls the directions service once to get a closer look at route
characteristics and attributes. \code{ors_summary} generates a range of
summary tables and values that provide an overview of a route.

\code{ors_inspect} returns all line segments of a route along with a set
of additional attributes
}
\examples{
\dontrun{
sample_source <- ors_sample(1)
sample_dest <- ors_sample(1)
profile = get_profiles()[1]

# Basic inspection without extra information
insp <- ors_inspect(sample_source, sample_dest, profile)

# Advanced inspection with extra information
insp_adv <- ors_inspect(
  sample_source,
  sample_dest,
  profile,
  extra_info = TRUE
)
                          
# Inspection of route elevation data
insp_elev <- ors_inspect(
  sample_source,
  sample_dest,
  profile,
  elevation = TRUE,
  elev_as_z = FALSE
)

# Inspection of route summary attributes
insp_attr <- ors_inspect(
  sample_source,
  sample_dest,
  profile,
  attributes = "detourfactor"
)
attr(insp_attr, "detourfactor")

# Altering the route by passing further arguments
insp_opts <- ors_inspect(
  sample_source,
  sample_dest,
  profile,
  continue_straight = TRUE,
  preference = "shortest",
  maximum_speed = 80
)

# Summarizing route specifics
route_summary <- ors_summary(sample_source, sample_dest, profile)
}
}
\seealso{
\code{\link{ors_distances}},
\code{\link{plot_section}}
}
