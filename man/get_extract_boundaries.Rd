% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sample.R
\name{get_extract_boundaries}
\alias{get_extract_boundaries}
\title{Extract boundaries}
\usage{
get_extract_boundaries(instance = NULL, force = FALSE, verbose = TRUE, ...)
}
\arguments{
\item{instance}{\code{[ors_instance]}

Object of an OpenRouteService instance that should be used for route
computations. It is recommended to use \code{\link{ors_instance}}
to set an instance globally. This argument should only be used if activating
an instance globally is not feasible.}

\item{force}{\code{[logical]}

If \code{TRUE}, extract must be identified and parsed. If
\code{FALSE}, the geometries will be read from the cache if possible.}

\item{verbose}{\code{[logical]}

If \code{TRUE}, prints a loading spinner.}

\item{...}{If \code{instance} is a local instance, this is ignored.
Otherwise, specifies further arguments for generating a random bbox
including: \code{dist}, the bbox radius in meters, and \code{seed}, a
random seed as in \code{\link{set.seed}}.}
}
\value{
An \code{sfc} object of the currently mounted extract boundaries.
}
\description{
Returns boundary geometries of the currently mounted extract.
For local instances, \code{get_extract_boundaries} wraps
\code{\link[osmextract]{oe_read}}. For remote instances, see section
"Remote instances".
}
\section{Remote instances}{


If \code{instance} is not local, it is more difficult to derive the
extract boundaries. There is thus far no way of accessing an OSM extract file
knowing only the server address. We can, however, make use of some
heuristics:

\code{\link{ors_extract}} can export the built graphs from an ORS server
if it allows it. However, it does not work on the public API and it
requires knowledge about the approximate area of an extract.

\code{\link{ors_guess}} can make an approximation of an extract area. It
accesses the snap endpoint which also does not work on the public API and
needs to be enabled on other servers. \code{ors_guess} can make a lot of
requests and might not be feasible in many situations.

If the public API is mounted, we know that the coverage is global.
\code{get_boundaries} generates a random buffer polygon somewhere in the
world. The size and position depend on the dot arguments \code{dist} and
\code{seed}. If possible, it makes use of the global land mass boundaries of
\code{\link[rnaturalearthdata]{coastline110}}. Otherwise, it assumes basic
WGS84 boundaries. While this practice does not always represent the real
boundaries, it can quite often enable working samples to be taken
by \code{\link{ors_sample}}.
}

\examples{
\dontrun{
library(rnaturalearthdata)
library(sf)

# For local instances, reads the extract file
ors <- ors_instance(tempdir(), verbose = FALSE)
bounds <- get_extract_boundaries()
plot(bounds)

# For public API instances, limits the routing area to a random polygon
ors <- ors_instance(server = "pub")
bounds <- get_extract_boundaries(dist = 200000, seed = 123)

plot(sf::st_as_sfc(rnaturalearthdata::countries110))
plot(bounds, add = TRUE)
}


}
