% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pois.R
\name{get_osm_pois}
\alias{get_osm_pois}
\title{Extract points of interest from OpenStreetMap}
\usage{
get_osm_pois(source, ..., radius = 5000L, timeout = NULL, do_bind = FALSE)
}
\arguments{
\item{source}{\code{[various]}

Either (1) an \code{sf} object containing coordinates, (2) a
character string of a place or region, (3) a spatial polygon as an sf or sfc
object or (4) any bbox format supported by \code{\link[osmdata]{opq}}. The
source argument is passed to osmdata to derive a bounding box for the
Overpass query.}

\item{...}{Can be used to pass key-value combinations of OSM map features.
Map features are passed as arguments: key = "value". For a list of features,
refer to the
\href{https://wiki.openstreetmap.org/wiki/Map_features}{documentation}.}

\item{radius}{\code{[numeric]}

If \code{source} is an \code{sf} data.frame containing point geometries,
specifies the buffer radius within which points of interest should be
searched.}

\item{timeout}{\code{[integer]}

Timeout limit for the Overpass query. See \code{\link[osmdata]{opq}}. For
larger queries, make sure to pass a high enough timeout.}

\item{do_bind}{\code{[logical]}

If \code{TRUE} and \code{source} is an \code{sf} data.frame containing point
geometries, binds results to a single data.frame and returns only distinct
points of interest. Otherwise, returns a list of data.frames.}
}
\value{
If \code{do_bind = FALSE} and \code{source} is an \code{sf} data.frame
containing point, geometries, returns a list of \code{sf} data.frames that
can be used for \code{\link[ORSRouting]{ors_shortest_distances}}. If
\code{do_bind = TRUE} or if \code{source} is a polygon, a place name or a
bounding box, returns a single \code{sf} data.frame with distinct points of
interest.
}
\description{
Makes Overpass requests to extract points of interest within
a specified area or list of areas.
}
\examples{
\dontrun{
set.seed(123)
sample_a <- ors_sample(20)

pois_source <- get_osm_pois(sample_a, amenity = "hospital", radius = 5000, crs = 4326)

set.seed(123)
test_sf <- ors_sample(20, as_sf = TRUE)
test_poly <- sf::st_convex_hull(sf::st_union(test_sf))
get_osm_pois(test_poly, amenity = "post_box", building = "residential", trim = FALSE)

test_bbox <- as.numeric(sf::st_bbox(test_poly))
get_osm_pois(test_bbox, amenity = "marketplace", as_sf = TRUE)

test_place <- "Cologne"
get_osm_pois(test_place, landuse = "allotments", timeout = 200, as_sf = TRUE)
}
}
