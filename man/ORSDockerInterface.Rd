% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ORSDockerInterface.R
\name{ORSDockerInterface}
\alias{ORSDockerInterface}
\title{OpenRouteService Docker interface}
\description{
R6 class that interacts with the Docker daemon and is able to
run basic commands on the openrouteservice:latest image and the ORS
container. \strong{This class is initialized from within
\code{\link{ORSInstance}}}.
}
\details{
If the setup fails, first clean up Docker and the docker directory
using \code{$cleanup}.

If the setup fails due to an OutOfMemoryError, first check if you allocated
enough memory. If it keeps failing, clear the available memory or restart
the system.

Sometimes, the the service just refuses to work. In this case, try to reboot
your system or wipe the ORS directory using \code{$remove} from
\code{\link{ORSInstance}}. This includes, but is not limited to, the following
phenomena:
\itemize{
\item Cryptic memory errors no matter how much memory you allocate
\item Illegal state exceptions complaining about location indices being
opened with incorrect graphs
}
}
\seealso{
Other ORSSetup: 
\code{\link{ORSConfig}},
\code{\link{ORSExtract}},
\code{\link{ORSInstance}},
\code{\link{ORSSetupSettings}}
}
\concept{ORSSetup}
\section{Super class}{
\code{\link[ORSRouting:ORSInstance]{ORSRouting::ORSInstance}} -> \code{ORSDockerInterface}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{docker_running}}{Checks if the Docker daemon is running.}

\item{\code{image_built}}{Checks if the openrouteservice:latest image exists.
An alternative image name can be provided.}

\item{\code{container_exists}}{Checks if the container ors-app exists.
An alternative container name can be provided.}

\item{\code{container_running}}{Checks if the the container ors-app is running.
An alternative container name can be provided.}

\item{\code{service_ready}}{Checks if the container service is ready to use. If
this field is \code{TRUE}, the service can be queried and used.}

\item{\code{error_log}}{Returns all errors from the logs. If \code{NULL}, no errors
occurred.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ORSDockerInterface$new()}}
\item \href{#method-container_up}{\code{ORSDockerInterface$container_up()}}
\item \href{#method-rm_image}{\code{ORSDockerInterface$rm_image()}}
\item \href{#method-container_down}{\code{ORSDockerInterface$container_down()}}
\item \href{#method-start_container}{\code{ORSDockerInterface$start_container()}}
\item \href{#method-stop_container}{\code{ORSDockerInterface$stop_container()}}
\item \href{#method-cleanup}{\code{ORSDockerInterface$cleanup()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="ORSRouting" data-topic="ORSInstance" data-id="initial_setup">}\href{../../ORSRouting/html/ORSInstance.html#method-initial_setup}{\code{ORSRouting::ORSInstance$initial_setup()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ORSRouting" data-topic="ORSInstance" data-id="remove">}\href{../../ORSRouting/html/ORSInstance.html#method-remove}{\code{ORSRouting::ORSInstance$remove()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initializes ORSDockerInterface, starts the Docker daemon
and specifies the port.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSDockerInterface$new()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{port}}{Integer scalar. Port that the server should run on.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-container_up"></a>}}
\if{latex}{\out{\hypertarget{method-container_up}{}}}
\subsection{Method \code{container_up()}}{
Builds the container, starts it and issues a system
notification when the service is ready to be used.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSDockerInterface$container_up(wait = TRUE, verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{wait}}{Logical. If \code{TRUE}, the function will not stop running
after the container is being started and will give out a notification as
soon as the service is ready. If \code{FALSE}, the function will start
the container and then stop. To check the server status, you can then
call \code{$service_ready} or \code{\link{ors_ready}}.}

\item{\code{verbose}}{Logical. If \code{TRUE}, prints Docker logs for container
setup.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rm_image"></a>}}
\if{latex}{\out{\hypertarget{method-rm_image}{}}}
\subsection{Method \code{rm_image()}}{
Deletes the image.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSDockerInterface$rm_image(force = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{force}}{Specifies if the image should be forcibly removed, even
if the container is still running or the source directory cannot be
found. Use with caution.}

\item{\code{name}}{Optional name of the container. If not provided, the method
will use \code{getOption("ors_name")} as a default.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-container_down"></a>}}
\if{latex}{\out{\hypertarget{method-container_down}{}}}
\subsection{Method \code{container_down()}}{
Removes the container after stopping it if necessary.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSDockerInterface$container_down()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-start_container"></a>}}
\if{latex}{\out{\hypertarget{method-start_container}{}}}
\subsection{Method \code{start_container()}}{
Starts the container.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSDockerInterface$start_container(name = NULL, wait = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Optional name of the container. If not provided, the method
will use \code{getOption("ors_name")} as a default.}

\item{\code{wait}}{Logical. If \code{TRUE}, the function will not stop running
after the container is being started and will give out a notification
as soon as the service is ready. If \code{FALSE}, the function will
start the container and then stop. To check the server status, you can
then call \code{$service_ready} or \code{\link{ors_ready}}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-stop_container"></a>}}
\if{latex}{\out{\hypertarget{method-stop_container}{}}}
\subsection{Method \code{stop_container()}}{
Stops the container.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSDockerInterface$stop_container(name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Optional name of the container. If not provided, the method
will use \code{getOption("ors_name")} as a default.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cleanup"></a>}}
\if{latex}{\out{\hypertarget{method-cleanup}{}}}
\subsection{Method \code{cleanup()}}{
Takes down the container, removes the image and deletes all
docker directories except /data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSDockerInterface$cleanup()}\if{html}{\out{</div>}}
}

}
}
