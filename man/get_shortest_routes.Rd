% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/routing.R
\name{get_shortest_routes}
\alias{get_shortest_routes}
\title{Calculate shortest routes to nearby points of interest}
\usage{
get_shortest_routes(
  source,
  poi_coords,
  profiles = c("driving-car", "foot-walking"),
  proximity_type = "duration",
  port = 8080
)
}
\arguments{
\item{source}{Source dataset that represents point coordinates that are to be routed
from. The source dataset should be passed as a double nested dataframe or list with
each row representing a x/y or lon/lat coordinate pair.}

\item{poi_coords}{Dataset containing dataframes of points of interest that are to be routed
to. Each list element matches a row in the source dataset and each element in one of the
dataframes represents the x/y or lon/lat coordinate pairs of one point of interest.}

\item{profiles}{Character vector or list. Means of transport as supported by OpenRouteService.
For a list of active profiles, call \code{\link[ORSRouting:ORSConfig]{ORSConfig$active_profiles}}. For
details on all profiles, refer to the \href{documentation}{https://giscience.github.io/openrouteservice/documentation/Tag-Filtering.html}.}

\item{proximity_type}{Type of proximity that the calculations should be based on. If
\code{distance}, the shortest physical distance will be calculated and if \code{duration}, the shortest
temporal distance will be calculated.}

\item{port}{Integer scalar. Port that the local server is running on.}
}
\value{
Dataframe with distances, travel durations and the index number of the point of
interest with the shortest distance to the respective place of the source dataset.
}
\description{
Calculates the shortest routes from a source dataset to the points of interest
of each coordinate pair. This function is a wrapper around \code{get_route_lengths} that matches
each coordinate pair to a list of points of interest and returns the route with the shortest
distance.
}
\examples{
pois <- query.osm.pois(datensatz.a, key = 'amenity', value = 'hospital', radius = 5000)
shortest_routes <- get_shortest_routes(datensatz.a, pois)
shortest_routes
#    point_number   route_type poi_number distance duration
# 1             1  driving-car          1   7617.6    685.4
# 2             1 foot-walking          3   4734.4   3408.7
# 3             2  driving-car          4   5050.8    665.1
# 4             2 foot-walking          4   4211.4   3032.2
# 5             3  driving-car          5   5986.3    635.9
# 6             3 foot-walking          4   3931.1   2830.4
# 7             4  driving-car         11   4144.4      505
# 8             4 foot-walking         11   3587.9   2583.3
# 9             5  driving-car         11   1393.1    196.1
# 10            5 foot-walking          2    926.9    667.4
}
