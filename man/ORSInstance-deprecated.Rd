% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ORSInstance.R
\name{ORSInstance}
\alias{ORSInstance}
\title{OpenRouteService backend control panel}
\description{
R6 class that acts as a setup wizard and control panel for the
OpenRouteService backend service. The class facilitates the setup of the
Docker container and allows making changes to the setup from within R.

This R6 class is deprecated in favor of \code{\link[ORSRouting]{ors_instance}}.
}
\details{
The purpose of this class is to facilitate the OpenRouteService
installation process. Alternatively, you can follow the official
instructions from the \href{https://giscience.github.io/openrouteservice/installation/Advanced-Docker-Setup.html}{OpenRouteService documentation}.

The class has four sub classes. \code{ORSExtract} manages the
OpenRouteService extract and is able to download \code{.pbf} files from different
sources using the \code{osmextract} package. \code{ORSConfig} controls the
configuration file (\code{ors-config.json}) which is also used to set active
profiles. \code{ORSSetupSettings} can be used to make changes to the
Docker setup, e.g. to allocate RAM, assign extracts or change the local
server access. \code{ORSDockerInterface} provides a basic interface
to Docker commands and can be used to check the status of the image,
container and service. The \code{ORSSetupSettings} should be set up
after \code{ORSExtract} and \code{ORSConfig} as the Docker setup
needs information on the extract and the number of profiles to assign the
extract and estimate the required RAM to be allocated.

An initial default can be set up using \code{$init_setup}. This method
should only be used for the initial container startup. Subsequent changes
to the setup need to be done using the subclasses.
}
\concept{ORSSetup}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{active}}{States if the R6 object is active or if it has been
killed using \code{$remove}. If \code{FALSE}, the fields and methods
of \code{ORSInstance} lose their functionality.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{dir}}{Path to the ORS main directory}

\item{\code{extract}}{ORSExtract environment. Refer to
\code{\link{ORSExtract}}.}

\item{\code{config}}{ORSConfig environment. Refer to
\code{\link{ORSConfig}}.}

\item{\code{setup_settings}}{ORSSetupSettings environment. Refer to
\code{\link{ORSSetupSettings}}.}

\item{\code{docker}}{ORSDockerInterface environment. Refer to
\code{\link{ORSDockerInterface}}.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ORSInstance-new}{\code{ORSInstance$new()}}
\item \href{#method-ORSInstance-initial_setup}{\code{ORSInstance$initial_setup()}}
\item \href{#method-ORSInstance-remove}{\code{ORSInstance$remove()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ORSInstance-new"></a>}}
\if{latex}{\out{\hypertarget{method-ORSInstance-new}{}}}
\subsection{Method \code{new()}}{
Initialize \code{\link{ORSInstance}} as well as \code{\link{ORSExtract}},
\code{\link{ORSConfig}}, \code{\link{ORSSetupSettings}} and
\code{\link{ORSDockerInterface}}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSInstance$new(dir = "~")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dir}}{Custom ORS directory. If not specified, the directory will be
downloaded to the system's home directory.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
It is recommended to pass a directory that is stable. If the
Docker container is set up and the source directory is removed, a number
of problems can emerge ranging from broken ORSRouting functions to the
necessity to force-delete the container.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ORSInstance-initial_setup"></a>}}
\if{latex}{\out{\hypertarget{method-ORSInstance-initial_setup}{}}}
\subsection{Method \code{initial_setup()}}{
Changes the necessary settings and configurations for the
first startup, builds the image and starts the container. This function
should only be used when starting the service for the first time. Changes
after that should preferably be made manually.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSInstance$initial_setup(
  profiles = NULL,
  extract = NULL,
  provider = NULL,
  init_memory = NULL,
  max_memory = NULL,
  wait = TRUE,
  verbose = TRUE,
  run = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{profiles}}{Character vector. Modes of transport for which graphs
should be build. Passed to \code{\link{ORSConfig}}.}

\item{\code{extract}}{Path to an OSM extract that is then passed to
\code{\link{ORSSetupSettings}}. Can also be any value that can be
passed to \code{$extract$get_extract}. Defaults to \verb{$extract$path}.
This means that if you already set an extract using
\code{\link{ORSExtract}}, you do not need to specify this argument. If
you did not set an extract using \code{ORSExtract}, you can pass a path
to a local extract here.}

\item{\code{provider}}{Character vector of OSM extract provider(s) that should
be searched for extracts.}

\item{\code{init_memory}}{Initial memory to be allocated to the docker
container. Passed to \code{\link{ORSSetupSettings}}.}

\item{\code{max_memory}}{Maximum memory to be allocated to the docker
container. The container will start with the initial memory and increases
the memory usage up to the maximum memory if necessary.
Passed to \code{\link{ORSSetupSettings}}.}

\item{\code{wait}}{Logical. If \code{TRUE}, the function will not stop running after
the container is being started and will give out a notification as soon
as the service is ready. If \code{FALSE}, the function will start the
container and then stop. To check the server status, you can then call
\verb{$service_ready} from the class \code{\link{ORSDockerInterface}}. Passed
to \code{\link{ORSDockerInterface}}.}

\item{\code{verbose}}{Logical. If \code{TRUE}, prints Docker logs for container
setup.}

\item{\code{run}}{Locial. If \code{TRUE}, returns \code{TRUE} if the initial setup is done
and runs the setup if not. If \code{FALSE}, only returns logicals to check
whether the initial setup is done or not.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ORSInstance-remove"></a>}}
\if{latex}{\out{\hypertarget{method-ORSInstance-remove}{}}}
\subsection{Method \code{remove()}}{
Take down all Docker containers and images and wipe the
OpenRouteService main directory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSInstance$remove(ignore_image = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ignore_image}}{Specifies if the ORS image should be removed.
Removing the image may have implications for other ORS instances or
simply fail if a running container is using the same image.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This function removes ORS entirely. It should only be used as a
means to "uninstall" OpenRouteService.
}

}
}
