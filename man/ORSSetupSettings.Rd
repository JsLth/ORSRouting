% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ORSSetupSettings.R
\name{ORSSetupSettings}
\alias{ORSSetupSettings}
\title{R6 Docker setup control panel}
\description{
R6 class that controls \code{docker-compose.yml} and \code{Dockerfile}.
Provides an interface to easily allocate memory, switch graph building on or
off and assign data. It is recommended to initialize this class after
setting an extract and configuring ORS. \strong{This class is initialized
from within \code{\link{ORSInstance}}}.
}
\seealso{
Other ORSSetup: 
\code{\link{ORSConfig}},
\code{\link{ORSDockerInterface}},
\code{\link{ORSExtract}},
\code{\link{ORSInstance}}
}
\concept{ORSSetup}
\section{Super class}{
\code{\link[ORSRouting:ORSInstance]{ORSRouting::ORSInstance}} -> \code{ORSSetupSettings}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{compose}}{\code{docker-compose.yml}, parsed as a list. Blocks and items
can be changed by assigning values to them.}

\item{\code{memory}}{List of varius memory infos. Total and free memory refer
to your system, init and max memory refer to the allocated memory of
ORS.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{graph_building}}{Specifices whether the image is built for the
first time or if the OSM extract is being changed. If \code{build} is
assigned to the field, indiciates that the graphs are built for the
first time. If \code{change} is assigned, indicates that the extract file
was changed and the existing graphs should be overwritten using the new
extract. If \code{NA} is assigned, indicates that no changes should be made
and that graph building should not be forced.}

\item{\code{ors_name}}{Name of the ORS container. A non-default name can be
specified by assigning a character string.}

\item{\code{ors_ports}}{Ports of the ORS container. Non-default ports can be
specified by assigning a length-1 vector or a list of ports. The list of
ports must contain 4 ports in the format
\code{list(host1, docker1, host2, docker2)}. Since, most of the time,
you will want to change only the first host port, passing a length-1
vector will change the first host port. Passing \code{NULL} (either in a
list or as a length-1 vector) is interpreted as "no change". Passing
\code{NA} will assign a random port using the \code{\link{httpuv}}
package.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ORSSetupSettings$new()}}
\item \href{#method-allocate_memory}{\code{ORSSetupSettings$allocate_memory()}}
\item \href{#method-save_compose}{\code{ORSSetupSettings$save_compose()}}
\item \href{#method-open_compose}{\code{ORSSetupSettings$open_compose()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="ORSRouting" data-topic="ORSInstance" data-id="initial_setup">}\href{../../ORSRouting/html/ORSInstance.html#method-initial_setup}{\code{ORSRouting::ORSInstance$initial_setup()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ORSRouting" data-topic="ORSInstance" data-id="remove">}\href{../../ORSRouting/html/ORSInstance.html#method-remove}{\code{ORSRouting::ORSInstance$remove()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initializes the \code{ORSSetupSettings} class. Reads the
\code{docker-compose.yml} and adjusts the \code{Dockerfile}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSSetupSettings$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-allocate_memory"></a>}}
\if{latex}{\out{\hypertarget{method-allocate_memory}{}}}
\subsection{Method \code{allocate_memory()}}{
Specifies the amount of memory to be allocated.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSSetupSettings$allocate_memory(init = NULL, max = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{init}}{Initial memory (GB) to be allocated to the docker container.}

\item{\code{max}}{Maximum memory (GB) to be allocated to the docker container.
The' container will start with the initial memory and increases the
memory usage up to the maximum memory if necessary.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
If only the memory limit is given, the initial memory will be set to
half that amount. If no memory is given, the method will estimate the
optimal amount of memory to be allocated. The memory is written to the
compose file.

OpenRouteService recommends allocating a little more than twice
the extract size. Make sure to not allocate more than your available memory.
If you allocate more than 80\% of your free working memory, the function will
stop. For details refer to the
\href{https://giscience.github.io/openrouteservice/installation/System-Requirements.html}{system requirements of OpenRouteService}.
Not allocating enough memory results in an OutOfMemory error during the
container startup.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-save_compose"></a>}}
\if{latex}{\out{\hypertarget{method-save_compose}{}}}
\subsection{Method \code{save_compose()}}{
Saves the setup changes by overwriting \code{docker-compose.yml}
with all changed fields. This should be run each time after changing any
settings.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSSetupSettings$save_compose()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-open_compose"></a>}}
\if{latex}{\out{\hypertarget{method-open_compose}{}}}
\subsection{Method \code{open_compose()}}{
Opens the raw compose file to allow manual changes. Useful
if you find the list structure of the parsed yaml impractical.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSSetupSettings$open_compose()}\if{html}{\out{</div>}}
}

}
}
