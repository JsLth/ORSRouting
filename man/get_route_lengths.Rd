% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/routing.R
\name{get_route_lengths}
\alias{get_route_lengths}
\title{Rowwise routing between two dataframes}
\usage{
get_route_lengths(
  source,
  destination,
  profile,
  units = "m",
  local = TRUE,
  port = 8080,
  api_key = NULL,
  geometry = FALSE
)
}
\arguments{
\item{source}{Source dataset that represents point coordinates that are to be routed
from. The source dataset should be passed as a double nested dataframe or list with
each row representing a x/y or lon/lat coordinate pair.}

\item{destination}{Destination dataset that represents point coordinates that are to be
routed to. The source dataset should be passed as a double nested dataframe or list with
each row representing a x/y or lon/lat coordinate pair. Essentially both datasets should
have the same format.}

\item{profile}{Character scalar. Means of transport as supported by OpenRouteService. For
a list of active profiles, call \code{\link[ORSRouting:ORSConfig]{ORSConfig$active_profiles}}.
For details on all profiles, refer to the
\href{https://giscience.github.io/openrouteservice/documentation/Tag-Filtering.html}{documentation}.}

\item{units}{Distance unit for distance calculations ('m', 'km' or 'mi', default: meters)}

\item{local}{Logical scalar. Specifies whether requests should be sent to the official web
server of OpenRouteService or to the local Docker server set up by \code{\link{ORSInstance}}.
For the use with larger datasets, it is advised to setup a local service backend. To query the
official web server, an API key has to be provided.}

\item{port}{Integer scalar. Port that the local server is running on.}

\item{api_key}{Character scalar. API key for the use of the official web server of
OpenRouteService. Only necessary, if \code{local = FALSE}.}

\item{geometry}{Specifies whether to return distance values or geometry features.}
}
\value{
Dataframe with distances and travel durations between source and destination
}
\description{
Calculates the routing distance between two datasets.
}
\examples{
route_lengths <- get_route_lengths(datensatz.a, datensatz.b, 'driving-car')
route_lengths
#   distance duration
# 1  12379.8    798.0
# 2  17667.3   1703.2
# 3  11659.2   1445.1
# 4  14933.1   1522.8
# 5   7926.0    876.8
}
